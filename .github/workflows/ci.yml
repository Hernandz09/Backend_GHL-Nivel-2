name: CI - Django Backend

on:
  push:
    branches: [ main, pruebas, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    name: Test Django Application
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: ['3.10', '3.11', '3.12']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r backend/requirements.txt
        pip install flake8 pytest pytest-django coverage
    
    - name: Create .env file
      run: |
        cd backend
        cp env.example .env
        echo "SECRET_KEY=test-secret-key-for-ci-only" >> .env
        echo "DEBUG=True" >> .env
    
    - name: Run migrations
      run: |
        cd backend
        python manage.py migrate --noinput
    
    - name: Run tests
      run: |
        cd backend
        python manage.py test
    
    - name: Run flake8 linting
      run: |
        cd backend
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      continue-on-error: true
    
    - name: Check for missing migrations
      run: |
        cd backend
        python manage.py makemigrations --check --dry-run --noinput

  code-quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r backend/requirements.txt
        pip install flake8 black isort
    
    - name: Check code formatting with Black
      run: |
        cd backend
        black --check --diff .
      continue-on-error: true
    
    - name: Check import sorting with isort
      run: |
        cd backend
        isort --check-only --diff .
      continue-on-error: true
    
    - name: Run security checks
      run: |
        pip install bandit
        cd backend
        bandit -r . -ll
      continue-on-error: true

  build:
    name: Build Check
    runs-on: ubuntu-latest
    needs: [test, code-quality]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r backend/requirements.txt
    
    - name: Create .env file
      run: |
        cd backend
        cp env.example .env
        echo "SECRET_KEY=test-secret-key-for-ci-only" >> .env
        echo "DEBUG=False" >> .env
    
    - name: Collect static files
      run: |
        cd backend
        python manage.py collectstatic --noinput
    
    - name: Check deployment readiness
      run: |
        cd backend
        python manage.py check --deploy --fail-level WARNING
